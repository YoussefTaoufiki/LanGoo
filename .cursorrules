# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using react-native-draggable-flatlist, the types are included in the package itself, no need for @types/react-native-draggable-flatlist
- When using react-native-paper's theme, use onPrimary instead of white for text color on primary background
- Use ThunkDispatch<RootState, undefined, AnyAction> for proper typing of Redux dispatch with thunks
- When installing @react-native-firebase/analytics and @react-native-community/netinfo in an Expo project, use npm install with --legacy-peer-deps flag to resolve version conflicts, and ensure @types/react-native is installed as a dev dependency
- Install @types/react-native-vector-icons for MaterialCommunityIcons type declarations
- Install @types/react-native-fs for react-native-fs type declarations
- Install @react-native-firebase/firestore and @react-native-firebase/auth for Firebase functionality
- Always provide explicit type annotations for parameters in Firebase query handlers to avoid implicit 'any' types
- Add commas after all style objects in StyleSheet.create to maintain proper syntax

# Scratchpad

## Current Task: Fix ESLint Issues

### Issue Categories

1. React Hook Dependencies
- Missing 'dispatch' dependency in useEffect
- Missing other dependencies in useEffect hooks
- Hook rules violations

2. Unused Styles
- Multiple components have unused style definitions
- Need to verify if styles are actually used or can be removed

3. Other Issues
- [X] Unreachable code in navigation.ts - Fixed by replacing placeholder returns with NotImplementedError
- [X] Constant condition in WordSearchGame.tsx - Fixed by optimizing isFound calculation to only run when there is an active selection

### Action Plan

#### 1. React Hook Dependencies
[X] Fix useEffect hooks missing 'dispatch' dependency in:
    - FillInBlanksGame.tsx
    - SentenceScrambleGame.tsx
    - TranslationPractice.tsx
    - WordSearchGame.tsx

[X] Fix other missing dependencies in:
    - SpeakingPracticeGame.tsx (stopRecording)
    - ReaderScreen.tsx (loadBook, loadSavedTranslations, loadSettings)
    - useBooks.ts (fetchBooks)
    - FocusScreen.tsx (handleSessionComplete)

[X] Fix Hook rules violation:
    - auth.ts (Google.useAuthRequest)

#### 2. Unused Styles
[X] Review and fix unused styles in game components:
    - [X] FillInBlanksGame.tsx - All styles are used, documented error state styles
    - [X] MultipleChoiceGame.tsx - All styles are used, good state handling
    - [X] SentenceScrambleGame.tsx - All styles are used
    - [X] SpeakingPracticeGame.tsx - All styles are used, excellent section organization
    - [X] TranslationPractice.tsx - All styles are used, good organization
    - [X] WordSearchGame.tsx - All styles are used, well-structured grid layout
    - [X] WritingExerciseGame.tsx - All styles are used, follows SpeakingPracticeGame.tsx pattern

[X] Review and fix unused styles in screen components:
    - [X] DashboardScreen.tsx - All styles used except header (using Appbar.Header instead)
    - [X] LoginScreen.tsx - All styles are used, well-organized for form and social login
    - [X] ReaderScreen.tsx - All styles are used, excellent theme handling and error states
    - [X] SignUpScreen.tsx - All styles are used, well-organized with social login and language selection

#### 3. Other Issues
[X] Fix unreachable code in navigation.ts
[X] Fix constant condition in WordSearchGame.tsx

### Progress Tracking

#### Completed
- [X] Created issue categorization
- [X] Created detailed action plan
- [X] Fixed React Hook dependencies in game components
- [X] Fixed React Hook dependencies in screen components
- [X] Fixed React Hook dependencies in hooks
- [X] Fixed Hook rules violation in auth.ts
- [X] Fixed constant condition in WordSearchGame.tsx
- [X] Fixed unreachable code in navigation.ts
- [X] Reviewed styles in FillInBlanksGame.tsx
- [X] Reviewed styles in SentenceScrambleGame.tsx
- [X] Reviewed styles in TranslationPractice.tsx
- [X] Reviewed styles in WordSearchGame.tsx
- [X] Reviewed styles in SpeakingPracticeGame.tsx
- [X] Reviewed styles in MultipleChoiceGame.tsx
- [X] Reviewed styles in WritingExerciseGame.tsx
- [X] Completed review of all game component styles
- [X] Reviewed styles in DashboardScreen.tsx
- [X] Reviewed styles in LoginScreen.tsx
- [X] Reviewed styles in ReaderScreen.tsx
- [X] Reviewed styles in SignUpScreen.tsx
- [X] Completed review of all screen component styles

#### In Progress
- [X] All tasks completed!

### Notes

- Keep track of any patterns or recurring issues
- Document any decisions about keeping seemingly unused styles
- Test thoroughly after each set of changes
- Error state styles should be consistent across game components
- All game components so far have consistent style structure
- TranslationPractice.tsx has good style organization that can be used as a reference
- WordSearchGame.tsx demonstrates good grid layout structure
- SpeakingPracticeGame.tsx shows excellent organization of styles into logical sections
- MultipleChoiceGame.tsx shows good handling of different states (selected, disabled, etc.)
- WritingExerciseGame.tsx follows the same organizational pattern as SpeakingPracticeGame.tsx
- DashboardScreen.tsx has unused header style due to using Appbar.Header instead - should be removed
- LoginScreen.tsx has well-organized styles for form layout and social login buttons
- ReaderScreen.tsx demonstrates excellent theme handling and error states
- SignUpScreen.tsx has well-organized styles for form, social login, and language selection

### Lessons Learned

- React Hook dependencies should be explicitly declared
- Use useCallback for function dependencies to prevent infinite loops
- Move function declarations before useEffect when they're used in the cleanup function
- Consider the scope and lifecycle of dependencies when using useEffect
- Hooks must be used inside React components or custom hooks
- Create custom hooks to encapsulate hook logic when needed
- Optimize conditional checks to avoid unnecessary calculations
- Use NotImplementedError for unimplemented features instead of returning null/default values
- Keep error state styles consistent across similar components for better maintainability
- Maintain consistent style structure across similar components for better code organization
- Group related styles together for better readability and maintainability
- Use descriptive style names that reflect their purpose and relationship to UI elements
- Organize styles into logical sections for better code organization and maintainability
- Handle different states in styles (selected, disabled, active) consistently across components
- Reuse successful style organization patterns across similar components
- When using react-native-paper components like Appbar.Header, remove any custom header styles that are no longer needed

## Current Task: Fix TypeScript Linter Errors

### Issue Categories

1. Missing Type Declarations
- [X] Cannot find module 'react-native-fs' in SpeakingPracticeGame.tsx
- [X] Could not find declaration file for 'react-native-vector-icons/MaterialCommunityIcons' in TranslationPractice.tsx
- [X] Cannot find module '@react-native-firebase/firestore' in navigation.ts
- [X] Cannot find module '@react-native-firebase/auth' in navigation.ts
Solution: Installed required type declarations and packages

2. Implicit Any Types
- [X] Parameter 'doc' implicitly has an 'any' type in navigation.ts
Solution: Added explicit type annotation using FirebaseFirestoreTypes.QueryDocumentSnapshot

### Progress

- [X] Installed missing packages and type declarations:
  - @types/react-native-vector-icons
  - @types/react-native-fs
  - @react-native-firebase/firestore
  - @react-native-firebase/auth
- [X] Added type annotation for doc parameter in navigation.ts

### Next Steps

- [ ] Wait for npm install to complete
- [ ] Verify all linter errors are resolved
- [ ] Test the affected components to ensure functionality is maintained

### Notes

- Keep track of any new type-related issues that may arise
- Document any patterns in type declarations that should be consistent across the codebase
- Consider adding TypeScript configuration to prevent implicit any types in the future

## Current Task: Fix Expo Snack Dependency Issues

### Issue Categories

1. Firebase Core Dependencies
[X] firebase@^9.23.0 resolution failure
[X] firebase-admin@^11.11.0 incompatibility
[X] @react-native-firebase/* version conflicts

2. Development Dependencies
[X] @types/react-native-fs resolution issue
[X] Move type definitions to devDependencies

3. Node.js Server Dependencies in Client
[X] @google-cloud/text-to-speech incompatibility
[X] @google-cloud/storage incompatibility

4. Web-only Dependencies in React Native
[X] @mui/material and related packages incompatibility
[X] Replace with React Native Paper components

5. Missing or Invalid Dependencies
[X] @expo/metro-config version specification

### Action Plan

#### 1. Firebase Dependencies
[X] Update firebase to v10.7.0
[X] Remove firebase-admin (server-side only)
[X] Update @react-native-firebase/* packages to v18.7.3

#### 2. Development Dependencies
[X] Move @types/* packages to devDependencies
[X] Update type declarations versions

#### 3. Server Dependencies
[X] Remove @google-cloud/* packages
[X] Create backend API endpoints for these services
[X] Update frontend code to use API endpoints

#### 4. UI Dependencies
[X] Remove all @mui/* packages
[X] Remove @emotion/* packages
[X] Ensure react-native-paper is properly configured

#### 5. Expo Configuration
[X] Add @expo/metro-config with specific version
[X] Update metro.config.js if needed

### Progress Tracking

[X] Initial package.json backup
[X] Firebase dependencies update
[X] Development dependencies reorganization
[X] Server dependencies removal and API creation
[X] UI dependencies cleanup
[X] Expo configuration update
[X] Testing in Expo Snack environment

### Notes

- Keep track of any breaking changes in Firebase v10
- Document API endpoints needed for replaced server dependencies
- Note any UI components that need recreation in React Native Paper
- Monitor bundle size and performance impact
- Configuration placeholders in app.config.js will be replaced with actual values in Expo Snack
- All API keys and sensitive data are handled through backend authentication
- Users only need to subscribe to access features, no API key management needed

### Lessons Learned

- Expo Snack has specific version requirements for Firebase
- Server-side packages should not be included in client-side bundle
- Web-only UI libraries should be avoided in React Native
- Type definitions should be in devDependencies
- Always specify exact versions for Expo configuration packages
- React Native Paper is the preferred UI library for React Native apps
- Vector Icons should be explicitly installed when using React Native Paper
- Firebase v10+ is required for Expo Snack compatibility
- Use Constants.expoConfig instead of process.env in Expo Snack
- Configuration should be handled through Expo's extra field
- Sensitive data should never be included in client-side code





